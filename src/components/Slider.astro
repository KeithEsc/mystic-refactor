<style>
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  /* Desktop styles */
  .gallery-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 60%;
    max-width: 70%;

    padding: 1rem;
    margin-top: 5rem;
  }

  .gallery-item {
    position: relative;
    flex: 1;
    height: 100%;
    transition: all 0.5s ease;
    filter: grayscale(100%);
    overflow: hidden;
    margin: 0 2px;
  }

  .gallery-item:hover {
    flex: 2;
    filter: grayscale(0%);
    z-index: 1;
  }

  .gallery-item img,
  .gallery-item video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .slideshow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  .gallery-item:hover .slideshow {
    opacity: 1;
  }

  .slideshow img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 1s ease;
  }

  .slideshow img.active {
    opacity: 1;
  }

  /* Media query for screens 900px or smaller */
  @media (max-width: 900px) {
    .gallery-container {
      overflow-x: hidden;
    }

    .gallery-container {
      position: relative;
      max-width: 100%;
      height: 500px;
      display: flex;
      justify-content: flex-start;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      -webkit-overflow-scrolling: touch;
      padding: 0;
      margin: 0 auto;
      cursor: grab;
      /* Added padding to ensure first item can be centered */
      padding-left: calc(50% - 25vw);
      padding-right: calc(50% - 35vw);
      box-sizing: border-box;
      margin-top: 5rem;
    }

    .gallery-container:active {
      cursor: grabbing;
    }

    .gallery-container::-webkit-scrollbar {
      display: none; /* Hide scrollbar for Chrome, Safari, and Opera */
    }

    .gallery-item {
      flex: 0 0 auto;
      width: 50vw; /* Each item takes 70% of viewport width */
      margin: 0 10px;
      filter: grayscale(100%);
      scroll-snap-align: center;
      transition: filter 0.5s ease;
    }

    /* Override desktop hover effects */
    .gallery-item:hover {
      flex: 0 0 auto;
      filter: grayscale(100%);
    }

    /* Center item is in color */
    .gallery-item.center {
      filter: grayscale(0%);
    }

    .gallery-item.center .slideshow {
      opacity: 1;
    }
  }
</style>

<div class="gallery-container" id="gallery">
  <!-- Image 1 (Static - NOT CURRENTLY USED) 
      <div class="gallery-item">
        <img src="red.png" alt="Image 1" />
      </div>
      -->

  <!-- Image 2 (Video) -->
  <div class="gallery-item">
    <img src="img5-1.jpg" alt="Image 2" />
    <video class="slideshow" loop muted>
      <source src="img5-vid.mp4" type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  </div>

  <!-- Image 3 (Slideshow) -->
  <div class="gallery-item">
    <img src="img1-1.jpg" alt="Image 3" />
    <div class="slideshow">
      <img src="img1-2.jpg" alt="Slide 1" class="active" />
      <img src="img1-3.jpg" alt="Slide 2" />
      <img src="img1-1.jpg" alt="Slide 3" />
    </div>
  </div>

  <!-- Add more gallery items as needed -->
  <div class="gallery-item">
    <img src="img2-1.jpg" alt="Image 3" />
    <div class="slideshow">
      <img src="img2-2.jpg" alt="Slide 1" class="active" />
      <img src="img2-3.jpg" alt="Slide 2" />
      <img src="img2-4.jpg" alt="Slide 3" />
      <img src="img2-1.jpg" alt="Slide 4" />
    </div>
  </div>

  <div class="gallery-item">
    <img src="img3-1.jpg" alt="Image 3" />
    <div class="slideshow">
      <img src="img3-2.jpg" alt="Slide 1" class="active" />
      <img src="img3-3.jpg" alt="Slide 2" />
      <img src="img3-1.jpg" alt="Slide 3" />
    </div>
  </div>

  <div class="gallery-item">
    <img src="img4-1.jpg" alt="Image 3" />
    <div class="slideshow">
      <img src="img4-2.jpg" alt="Slide 1" class="active" />
      <img src="img4-3.jpg" alt="Slide 2" />
      <img src="img4-4.jpg" alt="Slide 3" />
      <img src="img4-1.jpg" alt="Slide 3" />
    </div>
  </div>

  <div class="gallery-item">
    <img src="img6-1.jpg" alt="Image 3" />
    <div class="slideshow">
      <img src="img6-2.jpg" alt="Slide 1" class="active" />
      <img src="img6-3.jpg" alt="Slide 2" />
      <img src="img6-1.jpg" alt="Slide 3" />
    </div>
  </div>

  <script>
    // Desktop functionality
    document.querySelectorAll(".gallery-item video").forEach((video) => {
      const galleryItem = video.parentElement;

      galleryItem.addEventListener("mouseenter", () => {
        if (window.innerWidth > 900) {
          video.play();
        }
      });

      galleryItem.addEventListener("mouseleave", () => {
        if (window.innerWidth > 900) {
          video.pause();
          video.currentTime = 0;
        }
      });
    });

    document
      .querySelectorAll(".gallery-item .slideshow")
      .forEach((slideshow) => {
        if (!slideshow.querySelector("video")) {
          const galleryItem = slideshow.parentElement;
          const slides = slideshow.querySelectorAll("img");
          let currentSlide = 0;
          let slideInterval;

          const nextSlide = () => {
            slides[currentSlide].classList.remove("active");
            currentSlide = (currentSlide + 1) % slides.length;
            slides[currentSlide].classList.add("active");
          };

          galleryItem.addEventListener("mouseenter", () => {
            if (window.innerWidth > 900) {
              slideInterval = setInterval(nextSlide, 2000);
            }
          });

          galleryItem.addEventListener("mouseleave", () => {
            if (window.innerWidth > 900) {
              clearInterval(slideInterval);
              slides.forEach((slide) => slide.classList.remove("active"));
              currentSlide = 0;
              slides[currentSlide].classList.add("active");
            }
          });
        }
      });

    // Mobile functionality
    const galleryContainer = document.getElementById("gallery");
    const galleryItems = document.querySelectorAll(".gallery-item");
    let activeItemIndex = 0; // First image is active initially

    // Function to play media for the center item
    function playActiveMedia(item) {
      const video = item.querySelector("video");
      if (video) {
        video.play();
      }

      const slideshow = item.querySelector(".slideshow:not(video)");
      if (slideshow) {
        const slides = slideshow.querySelectorAll("img");
        let currentSlide = 0;

        // Clear any existing intervals
        if (window.slideshowInterval) {
          clearInterval(window.slideshowInterval);
        }

        // Reset slideshow
        slides.forEach((slide) => slide.classList.remove("active"));
        slides[0].classList.add("active");

        // Start slideshow
        window.slideshowInterval = setInterval(() => {
          slides[currentSlide].classList.remove("active");
          currentSlide = (currentSlide + 1) % slides.length;
          slides[currentSlide].classList.add("active");
        }, 2000);
      }
    }

    // Function to stop all media
    function stopAllMedia() {
      if (window.slideshowInterval) {
        clearInterval(window.slideshowInterval);
      }

      galleryItems.forEach((item) => {
        const video = item.querySelector("video");
        if (video) {
          video.pause();
          video.currentTime = 0;
        }
      });
    }

    // Function to update the center item based on scroll position
    function updateCenterItem() {
      if (window.innerWidth <= 900) {
        const containerRect = galleryContainer.getBoundingClientRect();
        const containerCenter = containerRect.left + containerRect.width / 2;

        let closestItem = null;
        let closestDistance = Infinity;

        galleryItems.forEach((item, index) => {
          const itemRect = item.getBoundingClientRect();
          const itemCenter = itemRect.left + itemRect.width / 2;
          const distance = Math.abs(containerCenter - itemCenter);

          item.classList.remove("center");

          if (distance < closestDistance) {
            closestDistance = distance;
            closestItem = item;
            activeItemIndex = index;
          }
        });

        if (closestItem) {
          closestItem.classList.add("center");
          stopAllMedia();
          playActiveMedia(closestItem);
        }
      }
    }

    // Function to center an item horizontally
    function centerItem(item) {
      if (window.innerWidth <= 900) {
        // Calculate the left position to center the item
        item.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "center",
        });
      }
    }

    // Initialize mobile view
    function initMobileView() {
      if (window.innerWidth <= 900) {
        // Remove any existing center classes
        galleryItems.forEach((item) => item.classList.remove("center"));

        // Set initial center item
        galleryItems[activeItemIndex].classList.add("center");
        playActiveMedia(galleryItems[activeItemIndex]);

        // Center the first item with a slight delay to ensure DOM is ready
        setTimeout(() => {
          centerItem(galleryItems[activeItemIndex]);
        }, 100);
      }
    }

    // Make the gallery draggable (for desktop browsers that don't support touch)
    let isDragging = false;
    let startX, scrollLeft;

    galleryContainer.addEventListener("mousedown", (e) => {
      if (window.innerWidth <= 900) {
        isDragging = true;
        startX = e.pageX - galleryContainer.offsetLeft;
        scrollLeft = galleryContainer.scrollLeft;
        galleryContainer.style.cursor = "grabbing";
      }
    });

    galleryContainer.addEventListener("mouseleave", () => {
      isDragging = false;
      galleryContainer.style.cursor = "grab";
    });

    galleryContainer.addEventListener("mouseup", () => {
      isDragging = false;
      galleryContainer.style.cursor = "grab";
    });

    galleryContainer.addEventListener("mousemove", (e) => {
      if (!isDragging) return;
      e.preventDefault();
      const x = e.pageX - galleryContainer.offsetLeft;
      const walk = (x - startX) * 2; // Speed multiplier
      galleryContainer.scrollLeft = scrollLeft - walk;
    });

    // Detect which item is in the center after scrolling stops
    let scrollTimeout;
    galleryContainer.addEventListener("scroll", () => {
      if (window.innerWidth <= 900) {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(updateCenterItem, 150);
      }
    });

    // Update on window resize
    window.addEventListener("resize", () => {
      if (window.innerWidth <= 900) {
        initMobileView();
      } else {
        stopAllMedia();
        galleryItems.forEach((item) => item.classList.remove("center"));
      }
    });

    // Initialize on page load
    window.addEventListener("load", initMobileView);

    // Force mobile view initialization after a short delay to ensure complete rendering
    setTimeout(() => {
      if (window.innerWidth <= 900) {
        initMobileView();
      }
    }, 300);
  </script>
</div>
